{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":8662607,"sourceType":"datasetVersion","datasetId":5190382}],"dockerImageVersionId":30733,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport torch\nimport torchvision\nimport torchvision.transforms as transforms\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader, Subset\n# use process bar tool\nfrom tqdm import tqdm\nimport torchvision.models as models\nfrom torchvision import transforms, datasets\nfrom torch.utils.data import DataLoader\nimport torch.nn.functional as F\n\nfrom torch.utils.data import DataLoader, Subset,Dataset\n# use process bar tool\nfrom tqdm import tqdm\nfrom PIL import Image\n\nimport os\n#for dirname, _, filenames in os.walk('/kaggle/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-19T07:54:56.992119Z","iopub.execute_input":"2024-06-19T07:54:56.992466Z","iopub.status.idle":"2024-06-19T07:55:00.671090Z","shell.execute_reply.started":"2024-06-19T07:54:56.992436Z","shell.execute_reply":"2024-06-19T07:55:00.670259Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":"class ResBlock(nn.Module):\n    def __init__(self, in_channels, out_channels, stride=1, downsample=None):\n        super(ResBlock, self).__init__()\n        self.conv1 = nn.Conv2d(in_channels, out_channels, kernel_size=3, stride=stride, padding=1, bias=False)\n        self.bn1 = nn.BatchNorm2d(out_channels)\n        self.conv2 = nn.Conv2d(out_channels, out_channels, kernel_size=3, stride=1, padding=1, bias=False)\n        self.bn2 = nn.BatchNorm2d(out_channels)\n        self.downsample = downsample\n\n    def forward(self, x):\n        identity = x\n        if self.downsample is not None:\n            identity = self.downsample(x)\n\n        out = self.conv1(x)\n        out = self.bn1(out)\n        out = F.relu(out)\n\n        out = self.conv2(out)\n        out = self.bn2(out)\n\n        out += identity\n        out = F.relu(out)\n\n        return out\n","metadata":{"execution":{"iopub.status.busy":"2024-06-17T09:14:44.267583Z","iopub.execute_input":"2024-06-17T09:14:44.268049Z","iopub.status.idle":"2024-06-17T09:14:44.276415Z","shell.execute_reply.started":"2024-06-17T09:14:44.268019Z","shell.execute_reply":"2024-06-17T09:14:44.275405Z"}}},{"cell_type":"code","source":"# DEPTHWISE AND POINTWISE CONV\nclass ResBlock(nn.Module):\n    def __init__(self, in_channels, out_channels, stride=1, downsample=None):\n        super(ResBlock, self).__init__()\n        self.depthwise_conv1 = nn.Conv2d(in_channels, in_channels, kernel_size=3, stride=stride, padding=1, groups=in_channels, bias=False)\n        self.pointwise_conv1 = nn.Conv2d(in_channels, out_channels, kernel_size=1, stride=1, bias=False)\n        self.bn1 = nn.BatchNorm2d(out_channels)\n        \n        self.depthwise_conv2 = nn.Conv2d(out_channels, out_channels, kernel_size=3, stride=1, padding=1, groups=out_channels, bias=False)\n        self.pointwise_conv2 = nn.Conv2d(out_channels, out_channels, kernel_size=1, stride=1, bias=False)\n        self.bn2 = nn.BatchNorm2d(out_channels)\n        \n        self.downsample = downsample\n\n    def forward(self, x):\n        identity = x\n        if self.downsample is not None:\n            identity = self.downsample(x)\n\n        out = self.depthwise_conv1(x)\n        out = self.pointwise_conv1(out)\n        out = self.bn1(out)\n        out = F.relu(out)\n\n        out = self.depthwise_conv2(out)\n        out = self.pointwise_conv2(out)\n        out = self.bn2(out)\n\n        out += identity\n        out = F.relu(out)\n\n        return out\n","metadata":{"execution":{"iopub.status.busy":"2024-06-19T07:55:00.672674Z","iopub.execute_input":"2024-06-19T07:55:00.673103Z","iopub.status.idle":"2024-06-19T07:55:00.682840Z","shell.execute_reply.started":"2024-06-19T07:55:00.673076Z","shell.execute_reply":"2024-06-19T07:55:00.681962Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"class ResNet(nn.Module):\n    def __init__(self, block, layers, num_classes=2):\n        super(ResNet, self).__init__()\n        self.in_channels = 64\n        self.conv1 = nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False)\n        self.bn1 = nn.BatchNorm2d(64)\n        self.relu = nn.ReLU(inplace=True)\n        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)\n\n        self.layer1 = self._make_layer(block, 64, layers[0])\n        self.layer2 = self._make_layer(block, 128, layers[1], stride=2)\n        self.layer3 = self._make_layer(block, 256, layers[2], stride=2)\n        self.layer4 = self._make_layer(block, 512, layers[3], stride=2)\n\n        self.avgpool = nn.AdaptiveAvgPool2d((1, 1))\n        self.dropout = nn.Dropout(0.5)\n        self.fc = nn.Linear(512, num_classes)\n\n    def _make_layer(self, block, out_channels, blocks, stride=1):\n        downsample = None\n        if stride != 1 or self.in_channels != out_channels:\n            downsample = nn.Sequential(\n                nn.Conv2d(self.in_channels, out_channels, kernel_size=1, stride=stride, bias=False),\n                nn.BatchNorm2d(out_channels),\n            )\n\n        layers = []\n        layers.append(block(self.in_channels, out_channels, stride, downsample))\n        self.in_channels = out_channels\n        for _ in range(1, blocks):\n            layers.append(block(self.in_channels, out_channels))\n\n        return nn.Sequential(*layers)\n\n    def forward(self, x):\n        x = self.conv1(x)\n        x = self.bn1(x)\n        x = self.relu(x)\n        x = self.maxpool(x)\n\n        x = self.layer1(x)\n        x = self.layer2(x)\n        x = self.layer3(x)\n        x = self.layer4(x)\n\n        x = self.avgpool(x)\n        x = torch.flatten(x, 1)\n        x = self.dropout(x)\n        x = self.fc(x)\n\n        return x\n","metadata":{"execution":{"iopub.status.busy":"2024-06-19T07:55:00.683972Z","iopub.execute_input":"2024-06-19T07:55:00.684310Z","iopub.status.idle":"2024-06-19T07:55:00.700507Z","shell.execute_reply.started":"2024-06-19T07:55:00.684279Z","shell.execute_reply":"2024-06-19T07:55:00.699646Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"class ModLayer4_ResNet(nn.Module):\n    def __init__(self, block, layers, num_classes=2):\n        super(ModLayer4_ResNet, self).__init__()\n        self.in_channels = 64\n        #self.conv1 = nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False)\n        self.conv1_depth = nn.Conv2d(3, 3, kernel_size=7, stride=2, padding=3, groups=3, bias=False)\n        self.conv1_point = nn.Conv2d(3, 64, kernel_size=1, bias=False)\n        \n        self.bn1 = nn.BatchNorm2d(64)\n        self.relu = nn.ReLU(inplace=True)\n        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)\n\n        self.layer1 = self._make_layer(block, 64, layers[0])\n        self.layer2 = self._make_layer(block, 128, layers[1], stride=2)\n        self.layer3 = self._make_layer(block, 256, layers[2], stride=2)\n        \n        self.layer4_1 = nn.Conv2d(256, 256, kernel_size=3, padding=1, groups=256, bias=False)\n        self.layer4_2 = nn.Conv2d(256, 2, kernel_size=1, stride=1, bias=False)\n\n        self.global_avgpool = nn.AdaptiveAvgPool2d((1, 1))\n\n        self.avgpool = nn.AdaptiveAvgPool2d((1, 1))\n        self.fc = nn.Linear(256, num_classes)  # Adjusted to match the output of layer3\n\n    def _make_layer(self, block, out_channels, blocks, stride=1):\n        downsample = None\n        if stride != 1 or self.in_channels != out_channels:\n            downsample = nn.Sequential(\n                #nn.Conv2d(self.in_channels, self.in_channels, kernel_size=3, padding=1, stride = stride,groups = self.in_channels, bias=False),\n                #nn.Conv2d(self.in_channels, out_channels, kernel_size=1, bias=False),\n                nn.Conv2d(self.in_channels, out_channels, kernel_size=1, stride=stride, bias=False),\n                nn.BatchNorm2d(out_channels),\n            )\n\n        layers = []\n        layers.append(block(self.in_channels, out_channels, stride, downsample))\n        self.in_channels = out_channels\n        for _ in range(1, blocks):\n            layers.append(block(self.in_channels, out_channels))\n\n        return nn.Sequential(*layers)\n\n    def forward(self, x):\n        #x = self.conv1(x)\n        x=self.conv1_depth(x)\n        x = self.conv1_point(x)\n        x = self.bn1(x)\n        x = self.relu(x)\n        x = self.maxpool(x)\n\n        x = self.layer1(x)\n        x = self.layer2(x)\n        x = self.layer3(x)\n        \n        #ｘ＝ self.layer4(x)\n        #x = self.avgpool(x)\n        #x = torch.flatten(x, 1)\n        #x = self.fc(x)\n\n        x = self.layer4_1(x)\n        x = self.layer4_2(x)\n        x = self.global_avgpool(x)\n        x = torch.flatten(x, 1)  # Flatten to (batch_size, 2)\n        return x","metadata":{"execution":{"iopub.status.busy":"2024-06-19T07:55:00.702268Z","iopub.execute_input":"2024-06-19T07:55:00.702784Z","iopub.status.idle":"2024-06-19T07:55:00.719440Z","shell.execute_reply.started":"2024-06-19T07:55:00.702756Z","shell.execute_reply":"2024-06-19T07:55:00.718488Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"# Clear previous variables from memory\nif 'class_0_image_paths' in locals():\n    del class_0_image_paths\nif 'class_1_image_paths' in locals():\n    del class_1_image_paths\n\nif 'class_0_labels' in locals():\n    del class_0_labels\nif 'class_1_labels' in locals():\n    del class_1_labels\n    \nif 'all_image_paths' in locals():\n    del all_image_paths\nif 'all_labels' in locals():\n    del all_labels\n    \nif 'original_dataset' in locals():\n    del original_dataset\n    \nif 'augmented_images' in locals():\n    del augmented_images\nif 'augmented_labels' in locals():\n    del augmented_labels\nif 'augmented_dataset' in locals():\n    print('del augmented_dataset')\n    del augmented_dataset","metadata":{"execution":{"iopub.status.busy":"2024-06-19T08:11:34.531789Z","iopub.execute_input":"2024-06-19T08:11:34.532700Z","iopub.status.idle":"2024-06-19T08:11:34.539760Z","shell.execute_reply.started":"2024-06-19T08:11:34.532664Z","shell.execute_reply":"2024-06-19T08:11:34.538846Z"},"trusted":true},"execution_count":56,"outputs":[{"name":"stdout","text":"del augmented_dataset\n","output_type":"stream"}]},{"cell_type":"code","source":"aug_transforms = transforms.Compose([\n    transforms.RandomHorizontalFlip(),\n    #transforms.RandomVerticalFlip(),\n    transforms.RandomAffine(degrees=(-30,30), translate=(0.5, 0.5), scale=(0.4, 1.0)),\n    transforms.RandomRotation(degrees=10), \n    #transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2, hue=0.2),\n    transforms.RandomResizedCrop(224),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5]),\n])\n\nclass CustomDataset(Dataset):\n    def __init__(self, image_paths, labels, transform=None):\n        self.image_paths = image_paths\n        self.labels = labels\n        self.transform = transform\n\n    def __len__(self):\n        return len(self.image_paths)\n\n    def __getitem__(self, idx):\n        img_path = self.image_paths[idx]\n        image = Image.open(img_path).convert(\"RGB\")  # Ensure the image is in RGB mode\n        label = self.labels[idx]\n        if self.transform:\n            image = self.transform(image)\n        return image, label\n    \ndef list_image_paths(directory):\n    return [os.path.join(directory, f) for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f)) and f.lower().endswith(('.png', '.jpg', '.jpeg'))]\n\ndef generate_augmented_dataset(original_dataset, num_augmented_images_per_class, transform):\n    augmented_images = []\n    augmented_labels = []\n    for label in [0, 1]:\n        counter = 0\n        while counter < num_augmented_images_per_class:\n            for img_path, lbl in zip(original_dataset.image_paths, original_dataset.labels):\n                if lbl == label:\n                    image = Image.open(img_path).convert(\"RGB\")\n                    augmented_img = transform(image)\n                    augmented_images.append(augmented_img)\n                    augmented_labels.append(lbl)\n                    counter += 1\n                    if counter >= num_augmented_images_per_class:\n                        break\n    return augmented_images, augmented_labels\n\n# List image paths for each class\n\nclass_0_image_paths = list_image_paths('/kaggle/input/ml-final-dataset/dataset/train/adults')\nclass_1_image_paths = list_image_paths('/kaggle/input/ml-final-dataset/dataset/train/children')\nclass_0_labels = [0] * len(class_0_image_paths)\nclass_1_labels = [1] * len(class_1_image_paths)\n\n# Combine both classes' image paths and labels\nall_image_paths = class_0_image_paths + class_1_image_paths\nall_labels = class_0_labels + class_1_labels\n\n# Create the original dataset\noriginal_dataset = CustomDataset(image_paths=all_image_paths, labels=all_labels, transform=None)\n\n# Number of augmented images generated per class\nnum_augmented_images_per_class = 1000\naugmented_images, augmented_labels = generate_augmented_dataset(original_dataset, num_augmented_images_per_class, aug_transforms)\n\n# Create a dataset from augmented images and labels\naugmented_dataset = [(img, lbl) for img, lbl in zip(augmented_images, augmented_labels)]\n\n# Custom dataset for augmented data\nclass AugmentedDataset(Dataset):\n    def __init__(self, augmented_data):\n        self.augmented_data = augmented_data\n\n    def __len__(self):\n        return len(self.augmented_data)\n\n    def __getitem__(self, idx):\n        image, label = self.augmented_data[idx]\n        return image, label\n\n","metadata":{"execution":{"iopub.status.busy":"2024-06-19T09:12:30.909056Z","iopub.execute_input":"2024-06-19T09:12:30.909734Z","iopub.status.idle":"2024-06-19T09:12:41.144582Z","shell.execute_reply.started":"2024-06-19T09:12:30.909698Z","shell.execute_reply":"2024-06-19T09:12:41.143611Z"},"trusted":true},"execution_count":134,"outputs":[]},{"cell_type":"code","source":"batch_size = 400\n\n# Create dataset and DataLoader\naugmented_dataset = AugmentedDataset(augmented_dataset)\ntrain_loader = DataLoader(augmented_dataset, batch_size=batch_size, shuffle=True)\n\n# Define transformations for the dataset\ntransform = transforms.Compose([\n    transforms.Resize((224, 224)),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])\n])\n\n# Load dataset\n#train_dataset = datasets.ImageFolder(root='/kaggle/input/ml-final-dataset/dataset/train', transform=transform)\ntest_dataset = datasets.ImageFolder(root='/kaggle/input/ml-final-dataset/dataset/test', transform=transform)\n\n#train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True)\ntest_loader = DataLoader(dataset=test_dataset, batch_size=batch_size, shuffle=False)","metadata":{"execution":{"iopub.status.busy":"2024-06-19T09:50:08.193888Z","iopub.execute_input":"2024-06-19T09:50:08.194249Z","iopub.status.idle":"2024-06-19T09:50:08.215618Z","shell.execute_reply.started":"2024-06-19T09:50:08.194216Z","shell.execute_reply":"2024-06-19T09:50:08.214878Z"},"trusted":true},"execution_count":168,"outputs":[]},{"cell_type":"code","source":"model = ModLayer4_ResNet(ResBlock, [2, 2, 2, 2], num_classes=2)\n# Load the saved model\n#model = torch.load('/kaggle/working/2024_06_17_ResNetModLayer4.pt')\n\n# Instantiate the modified model\n#modified_model = ModLayer4_ResNet(ResBlock, [2, 2, 2, 2],num_classes=2)\n\n# Load the state dict of the original model\n#pretrained_dict = model.state_dict()\n\n# Filter out layer4 parameters from the state dict\n#filtered_dict = {k: v for k, v in pretrained_dict.items() if not( k.startswith('layer4') or k.startswith('fc'))}\n\n# Load the state dict into the modified model\n#modified_model.load_state_dict(filtered_dict , strict=False)\n#model = modified_model\n\n#if(model != None):\n#    del model\n#modified_model = ModLayer4_ResNet(ResBlock, [2, 2, 2, 2],num_classes=2)\n#model = torch.load('/kaggle/working/2024_06_17_ResNetModLayer4_SepConv7.pt')\n#pretrained_dict = model.state_dict()\n#filtered_dict = {k: v for k, v in pretrained_dict.items() if not( k.startswith('fc'))}\n#modified_model.load_state_dict(filtered_dict , strict=False)\n#model = modified_model\n\n#model = ModLayer4_ResNet(ResBlock, [2, 2, 2, 2],num_classes=2)\n# Transfer model to GPU if available\ntorch.cuda.empty_cache()\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nmodel = model.to(device)\n\n# Define loss function and optimizer\ncriterion = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=0.001)","metadata":{"execution":{"iopub.status.busy":"2024-06-19T09:50:14.067458Z","iopub.execute_input":"2024-06-19T09:50:14.067824Z","iopub.status.idle":"2024-06-19T09:50:14.090962Z","shell.execute_reply.started":"2024-06-19T09:50:14.067794Z","shell.execute_reply":"2024-06-19T09:50:14.090092Z"},"trusted":true},"execution_count":169,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt","metadata":{"execution":{"iopub.status.busy":"2024-06-19T09:50:15.155743Z","iopub.execute_input":"2024-06-19T09:50:15.156099Z","iopub.status.idle":"2024-06-19T09:50:15.160425Z","shell.execute_reply.started":"2024-06-19T09:50:15.156069Z","shell.execute_reply":"2024-06-19T09:50:15.159481Z"},"trusted":true},"execution_count":170,"outputs":[]},{"cell_type":"code","source":"#num_epochsArr = np.array([5, 10, 15, 20, 25, 30, 35, 40])\ntrain_acc = []\ntest_acc = []\nnum_epochs = 40\n\nfor epoch in range(num_epochs):\n    model.train()\n    running_loss = 0.0\n    \n    # Use tqdm to create a progress bar for the data loader\n    for images, labels in tqdm(train_loader, desc=f\"Epoch {epoch + 1}/{num_epochs}\", unit=\"batch\"):\n        images, labels = images.to(device), labels.to(device)\n        \n        # Zero the parameter gradients\n        optimizer.zero_grad()\n        \n        # Forward pass\n        outputs = model(images)\n        loss = criterion(outputs, labels)\n        \n        # Backward pass and optimization\n        loss.backward()\n        optimizer.step()\n        \n        running_loss += loss.item()\n        \n        del images\n        del labels\n        torch.cuda.empty_cache()\n    \n    #print(f'Epoch [{epoch + 1}/{num_epochs}], Loss: {running_loss / len(train_loader):.4f}')\n    \n    if((epoch+1)%5 == 0):\n        model.eval()\n        correct = 0\n        total = 0\n        with torch.no_grad():\n            for images, labels in test_loader:\n                images, labels = images.to(device), labels.to(device)\n                outputs = model(images)\n                _, predicted = torch.max(outputs.data, 1)\n                total += labels.size(0)\n                correct += (predicted == labels).sum().item()\n\n                del images\n                del labels\n                torch.cuda.empty_cache()\n        test_acc.append(100 * correct / total)\n        print(f'Test Accuracy: {100 * correct / total:.2f}%')\n        \n\n        model.eval()\n        correct = 0\n        total = 0\n        with torch.no_grad():\n            for images, labels in train_loader:\n                images, labels = images.to(device), labels.to(device)\n                outputs = model(images)\n                _, predicted = torch.max(outputs.data, 1)\n                total += labels.size(0)\n                correct += (predicted == labels).sum().item()\n\n                del images\n                del labels\n                torch.cuda.empty_cache()\n        train_acc.append(100 * correct / total)\n        print(f'Train Accuracy: {100 * correct / total:.2f}%')","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2024-06-19T09:50:16.248918Z","iopub.execute_input":"2024-06-19T09:50:16.249532Z","iopub.status.idle":"2024-06-19T09:53:39.300169Z","shell.execute_reply.started":"2024-06-19T09:50:16.249498Z","shell.execute_reply":"2024-06-19T09:53:39.299275Z"},"trusted":true},"execution_count":171,"outputs":[{"name":"stderr","text":"Epoch 1/40: 100%|██████████| 5/5 [00:04<00:00,  1.10batch/s]\nEpoch 2/40: 100%|██████████| 5/5 [00:04<00:00,  1.06batch/s]\nEpoch 3/40: 100%|██████████| 5/5 [00:04<00:00,  1.06batch/s]\nEpoch 4/40: 100%|██████████| 5/5 [00:04<00:00,  1.06batch/s]\nEpoch 5/40: 100%|██████████| 5/5 [00:04<00:00,  1.07batch/s]\n","output_type":"stream"},{"name":"stdout","text":"Test Accuracy: 45.83%\nTrain Accuracy: 49.75%\n","output_type":"stream"},{"name":"stderr","text":"Epoch 6/40: 100%|██████████| 5/5 [00:04<00:00,  1.10batch/s]\nEpoch 7/40: 100%|██████████| 5/5 [00:04<00:00,  1.06batch/s]\nEpoch 8/40: 100%|██████████| 5/5 [00:04<00:00,  1.06batch/s]\nEpoch 9/40: 100%|██████████| 5/5 [00:04<00:00,  1.06batch/s]\nEpoch 10/40: 100%|██████████| 5/5 [00:04<00:00,  1.06batch/s]\n","output_type":"stream"},{"name":"stdout","text":"Test Accuracy: 53.33%\nTrain Accuracy: 69.00%\n","output_type":"stream"},{"name":"stderr","text":"Epoch 11/40: 100%|██████████| 5/5 [00:04<00:00,  1.10batch/s]\nEpoch 12/40: 100%|██████████| 5/5 [00:04<00:00,  1.07batch/s]\nEpoch 13/40: 100%|██████████| 5/5 [00:04<00:00,  1.06batch/s]\nEpoch 14/40: 100%|██████████| 5/5 [00:04<00:00,  1.06batch/s]\nEpoch 15/40: 100%|██████████| 5/5 [00:04<00:00,  1.06batch/s]\n","output_type":"stream"},{"name":"stdout","text":"Test Accuracy: 56.67%\nTrain Accuracy: 63.35%\n","output_type":"stream"},{"name":"stderr","text":"Epoch 16/40: 100%|██████████| 5/5 [00:04<00:00,  1.10batch/s]\nEpoch 17/40: 100%|██████████| 5/5 [00:04<00:00,  1.06batch/s]\nEpoch 18/40: 100%|██████████| 5/5 [00:04<00:00,  1.06batch/s]\nEpoch 19/40: 100%|██████████| 5/5 [00:04<00:00,  1.06batch/s]\nEpoch 20/40: 100%|██████████| 5/5 [00:04<00:00,  1.06batch/s]\n","output_type":"stream"},{"name":"stdout","text":"Test Accuracy: 64.17%\nTrain Accuracy: 96.45%\n","output_type":"stream"},{"name":"stderr","text":"Epoch 21/40: 100%|██████████| 5/5 [00:04<00:00,  1.10batch/s]\nEpoch 22/40: 100%|██████████| 5/5 [00:04<00:00,  1.06batch/s]\nEpoch 23/40: 100%|██████████| 5/5 [00:04<00:00,  1.06batch/s]\nEpoch 24/40: 100%|██████████| 5/5 [00:04<00:00,  1.06batch/s]\nEpoch 25/40: 100%|██████████| 5/5 [00:04<00:00,  1.06batch/s]\n","output_type":"stream"},{"name":"stdout","text":"Test Accuracy: 63.33%\nTrain Accuracy: 96.70%\n","output_type":"stream"},{"name":"stderr","text":"Epoch 26/40: 100%|██████████| 5/5 [00:04<00:00,  1.10batch/s]\nEpoch 27/40: 100%|██████████| 5/5 [00:04<00:00,  1.07batch/s]\nEpoch 28/40: 100%|██████████| 5/5 [00:04<00:00,  1.06batch/s]\nEpoch 29/40: 100%|██████████| 5/5 [00:04<00:00,  1.06batch/s]\nEpoch 30/40: 100%|██████████| 5/5 [00:04<00:00,  1.06batch/s]\n","output_type":"stream"},{"name":"stdout","text":"Test Accuracy: 64.17%\nTrain Accuracy: 96.85%\n","output_type":"stream"},{"name":"stderr","text":"Epoch 31/40: 100%|██████████| 5/5 [00:04<00:00,  1.10batch/s]\nEpoch 32/40: 100%|██████████| 5/5 [00:04<00:00,  1.06batch/s]\nEpoch 33/40: 100%|██████████| 5/5 [00:04<00:00,  1.07batch/s]\nEpoch 34/40: 100%|██████████| 5/5 [00:04<00:00,  1.06batch/s]\nEpoch 35/40: 100%|██████████| 5/5 [00:04<00:00,  1.06batch/s]\n","output_type":"stream"},{"name":"stdout","text":"Test Accuracy: 65.83%\nTrain Accuracy: 96.95%\n","output_type":"stream"},{"name":"stderr","text":"Epoch 36/40: 100%|██████████| 5/5 [00:04<00:00,  1.10batch/s]\nEpoch 37/40: 100%|██████████| 5/5 [00:04<00:00,  1.06batch/s]\nEpoch 38/40: 100%|██████████| 5/5 [00:04<00:00,  1.06batch/s]\nEpoch 39/40: 100%|██████████| 5/5 [00:04<00:00,  1.06batch/s]\nEpoch 40/40: 100%|██████████| 5/5 [00:04<00:00,  1.06batch/s]\n","output_type":"stream"},{"name":"stdout","text":"Test Accuracy: 60.00%\nTrain Accuracy: 96.80%\n","output_type":"stream"}]},{"cell_type":"code","source":"# 20\n# Training loop\n#best_model = model\n#best_acc = 75.83\n\n#num_epochs = 40\nnum_epochs = 5\nfor epoch in range(num_epochs):\n    model.train()\n    running_loss = 0.0\n    \n    # Use tqdm to create a progress bar for the data loader\n    for images, labels in tqdm(train_loader, desc=f\"Epoch {epoch + 1}/{num_epochs}\", unit=\"batch\"):\n        images, labels = images.to(device), labels.to(device)\n        \n        # Zero the parameter gradients\n        optimizer.zero_grad()\n        \n        # Forward pass\n        outputs = model(images)\n        loss = criterion(outputs, labels)\n        \n        # Backward pass and optimization\n        loss.backward()\n        optimizer.step()\n        \n        running_loss += loss.item()\n        \n        del images\n        del labels\n        torch.cuda.empty_cache()\n    \n    print(f'Epoch [{epoch + 1}/{num_epochs}], Loss: {running_loss / len(train_loader):.4f}')","metadata":{"execution":{"iopub.status.busy":"2024-06-19T09:16:54.431478Z","iopub.execute_input":"2024-06-19T09:16:54.431839Z","iopub.status.idle":"2024-06-19T09:17:21.044295Z","shell.execute_reply.started":"2024-06-19T09:16:54.431812Z","shell.execute_reply":"2024-06-19T09:17:21.043409Z"},"trusted":true},"execution_count":147,"outputs":[{"name":"stderr","text":"Epoch 1/5: 100%|██████████| 63/63 [00:05<00:00, 11.80batch/s]\n","output_type":"stream"},{"name":"stdout","text":"Epoch [1/5], Loss: 0.3786\n","output_type":"stream"},{"name":"stderr","text":"Epoch 2/5: 100%|██████████| 63/63 [00:05<00:00, 11.89batch/s]\n","output_type":"stream"},{"name":"stdout","text":"Epoch [2/5], Loss: 0.3033\n","output_type":"stream"},{"name":"stderr","text":"Epoch 3/5: 100%|██████████| 63/63 [00:05<00:00, 11.79batch/s]\n","output_type":"stream"},{"name":"stdout","text":"Epoch [3/5], Loss: 0.3004\n","output_type":"stream"},{"name":"stderr","text":"Epoch 4/5: 100%|██████████| 63/63 [00:05<00:00, 11.89batch/s]\n","output_type":"stream"},{"name":"stdout","text":"Epoch [4/5], Loss: 0.2708\n","output_type":"stream"},{"name":"stderr","text":"Epoch 5/5: 100%|██████████| 63/63 [00:05<00:00, 11.86batch/s]","output_type":"stream"},{"name":"stdout","text":"Epoch [5/5], Loss: 0.2324\n","output_type":"stream"},{"name":"stderr","text":"\n","output_type":"stream"}]},{"cell_type":"code","source":"# Evaluate the model on the test dataset\n#model = best_model\nmodel.eval()\ncorrect = 0\ntotal = 0\nwith torch.no_grad():\n    for images, labels in test_loader:\n        images, labels = images.to(device), labels.to(device)\n        outputs = model(images)\n        _, predicted = torch.max(outputs.data, 1)\n        total += labels.size(0)\n        correct += (predicted == labels).sum().item()\n        \n        #del images\n        #del labels\n        torch.cuda.empty_cache()\n\nprint(f'Test Accuracy: {100 * correct / total:.2f}%')","metadata":{"execution":{"iopub.status.busy":"2024-06-19T09:17:49.491226Z","iopub.execute_input":"2024-06-19T09:17:49.491802Z","iopub.status.idle":"2024-06-19T09:17:50.010563Z","shell.execute_reply.started":"2024-06-19T09:17:49.491769Z","shell.execute_reply":"2024-06-19T09:17:50.009689Z"},"trusted":true},"execution_count":150,"outputs":[{"name":"stdout","text":"Test Accuracy: 61.67%\n","output_type":"stream"}]},{"cell_type":"code","source":"\nmodel.eval()\ncorrect = 0\ntotal = 0\nwith torch.no_grad():\n    for images, labels in train_loader:\n        images, labels = images.to(device), labels.to(device)\n        outputs = model(images)\n        _, predicted = torch.max(outputs.data, 1)\n        total += labels.size(0)\n        correct += (predicted == labels).sum().item()\n\nprint(f'Train Accuracy: {100 * correct / total:.2f}%')","metadata":{"execution":{"iopub.status.busy":"2024-06-19T09:17:51.210722Z","iopub.execute_input":"2024-06-19T09:17:51.211570Z","iopub.status.idle":"2024-06-19T09:17:52.152781Z","shell.execute_reply.started":"2024-06-19T09:17:51.211521Z","shell.execute_reply":"2024-06-19T09:17:52.151851Z"},"trusted":true},"execution_count":151,"outputs":[{"name":"stdout","text":"Train Accuracy: 93.55%\n","output_type":"stream"}]},{"cell_type":"code","source":"num_epochsArr = np.array([5, 10, 15, 20, 25, 30, 35, 40])\ntrain_acc = np.array(train_acc)\ntest_acc = np.array(test_acc)\n\nplt.plot(num_epochsArr,train_acc, label = 'train_acc')\nplt.plot(num_epochsArr,test_acc, label = 'test_acc')\nplt.xlabel('# of epochs')\nplt.ylabel('Accuracy')\nplt.title('Accuracy vs # of epochs')\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-19T09:11:39.512607Z","iopub.execute_input":"2024-06-19T09:11:39.512970Z","iopub.status.idle":"2024-06-19T09:11:39.752497Z","shell.execute_reply.started":"2024-06-19T09:11:39.512942Z","shell.execute_reply":"2024-06-19T09:11:39.751632Z"},"trusted":true},"execution_count":133,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"#torch.save(model, '/kaggle/working/2024_06_17_ResNet.pt')\n","metadata":{"execution":{"iopub.status.busy":"2024-06-17T14:38:49.046072Z","iopub.execute_input":"2024-06-17T14:38:49.046723Z","iopub.status.idle":"2024-06-17T14:38:49.071190Z","shell.execute_reply.started":"2024-06-17T14:38:49.046692Z","shell.execute_reply":"2024-06-17T14:38:49.070155Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"%pip install torchprofile torchsummary","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2024-06-19T05:19:06.865262Z","iopub.execute_input":"2024-06-19T05:19:06.865611Z","iopub.status.idle":"2024-06-19T05:19:21.492518Z","shell.execute_reply.started":"2024-06-19T05:19:06.865583Z","shell.execute_reply":"2024-06-19T05:19:21.491379Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"Collecting torchprofile\n  Downloading torchprofile-0.0.4-py3-none-any.whl.metadata (303 bytes)\nCollecting torchsummary\n  Downloading torchsummary-1.5.1-py3-none-any.whl.metadata (296 bytes)\nRequirement already satisfied: numpy>=1.14 in /opt/conda/lib/python3.10/site-packages (from torchprofile) (1.26.4)\nRequirement already satisfied: torch>=1.4 in /opt/conda/lib/python3.10/site-packages (from torchprofile) (2.1.2)\nRequirement already satisfied: torchvision>=0.4 in /opt/conda/lib/python3.10/site-packages (from torchprofile) (0.16.2)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from torch>=1.4->torchprofile) (3.13.1)\nRequirement already satisfied: typing-extensions in /opt/conda/lib/python3.10/site-packages (from torch>=1.4->torchprofile) (4.9.0)\nRequirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch>=1.4->torchprofile) (1.12.1)\nRequirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch>=1.4->torchprofile) (3.2.1)\nRequirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch>=1.4->torchprofile) (3.1.2)\nRequirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch>=1.4->torchprofile) (2024.3.1)\nRequirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from torchvision>=0.4->torchprofile) (2.32.3)\nRequirement already satisfied: pillow!=8.3.*,>=5.3.0 in /opt/conda/lib/python3.10/site-packages (from torchvision>=0.4->torchprofile) (9.5.0)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch>=1.4->torchprofile) (2.1.3)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests->torchvision>=0.4->torchprofile) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests->torchvision>=0.4->torchprofile) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests->torchvision>=0.4->torchprofile) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests->torchvision>=0.4->torchprofile) (2024.2.2)\nRequirement already satisfied: mpmath<1.4.0,>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from sympy->torch>=1.4->torchprofile) (1.3.0)\nDownloading torchprofile-0.0.4-py3-none-any.whl (7.7 kB)\nDownloading torchsummary-1.5.1-py3-none-any.whl (2.8 kB)\nInstalling collected packages: torchsummary, torchprofile\nSuccessfully installed torchprofile-0.0.4 torchsummary-1.5.1\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}]},{"cell_type":"code","source":"from torchsummary import summary\nimport torchvision.models as models\nfrom torchprofile import profile_macs\n# Calculate the number of trainable parameters and all parameters\ntrainable_params = sum(p.numel() for p in model.parameters() if p.requires_grad)\nall_params = sum(p.numel() for p in model.parameters())\n\nprint('trainable_params = ', trainable_params)\nprint('all_params = ', all_params)\n\n# Create a dummy input tensor with the same size as the input images\ninput_tensor = torch.randn(1, 3, 224, 224).to(device)\n\n# Calculate FLOPs\nflops = profile_macs(model, input_tensor)\nprint(f'FLOPs: {flops / 1e9:.2f} GFLOPs')  # Convert to GFLOPs (GigaFLOPs)","metadata":{"execution":{"iopub.status.busy":"2024-06-19T05:19:21.494836Z","iopub.execute_input":"2024-06-19T05:19:21.495236Z","iopub.status.idle":"2024-06-19T05:19:21.746092Z","shell.execute_reply.started":"2024-06-19T05:19:21.495197Z","shell.execute_reply":"2024-06-19T05:19:21.745067Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"trainable_params =  366613\nall_params =  366613\nFLOPs: 0.17 GFLOPs\n","output_type":"stream"}]},{"cell_type":"code","source":"# acc =75.83 %\n#trainable_params =  1443202\n#all_params =  1443202\n#FLOPs: 0.34 GFLOPs\n# 12000 train data\n# 18 epoch\n#　batch_size = 200\n\n#torch.save(model, '/kaggle/working/2024_06_17_ResNet.pt')","metadata":{"execution":{"iopub.status.busy":"2024-06-17T10:05:12.546698Z","iopub.execute_input":"2024-06-17T10:05:12.547096Z","iopub.status.idle":"2024-06-17T10:05:12.588063Z","shell.execute_reply.started":"2024-06-17T10:05:12.547051Z","shell.execute_reply":"2024-06-17T10:05:12.587353Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# acc =77.5%\n#trainable_params =  375682\n#all_params =  375682\n#FLOPs: 0.29 GFLOPs\n# 12000 train data\n# 5 epoch\n#　batch_size = 200\n#torch.save(model, '/kaggle/working/2024_06_17_ResNetModLayer4.pt')","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#acc = 80%\n#trainable_params =  366613\n#all_params =  366613\n#FLOPs: 0.17 GFLOPs\n# 40000 train data\n# 30 epoch\n# batch_size = 100\n#torch.save(model, '/kaggle/working/2024_06_17_ResNetModLayer4_SepConv7.pt')","metadata":{"execution":{"iopub.status.busy":"2024-06-18T06:59:04.878899Z","iopub.execute_input":"2024-06-18T06:59:04.879257Z","iopub.status.idle":"2024-06-18T06:59:04.904478Z","shell.execute_reply.started":"2024-06-18T06:59:04.879228Z","shell.execute_reply":"2024-06-18T06:59:04.903662Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}